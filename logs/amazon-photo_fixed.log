/home/md724/Spectral-Basis/venv/lib/python3.12/site-packages/outdated/__init__.py:36: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
  from pkg_resources import parse_version
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
/home/md724/Spectral-Basis/experiments/investigation2_directions_AB.py:291: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
  auc = np.trapz(val_accs, dx=1) / len(val_accs)
======================================================================
INVESTIGATION 2: DIRECTIONS A & B - AMAZON-PHOTO
======================================================================
Device: cuda
GPU: NVIDIA GeForce RTX 4070 Ti SUPER
GPU Memory: 15.56 GB
Random splits: No (fixed benchmark)
======================================================================

[1/6] Loading amazon-photo...
Creating 60/20/20 split for amazon-photo...

Dataset Statistics:
  Nodes: 7,650
  Edges: 238,162
  Classes: 8
  Raw feature dimension: 745
  Train: 4,590 (60.0%)
  Val: 1,530 (20.0%)
  Test: 1,530 (20.0%)

[2/6] Building graph matrices...
Adjacency: (7650, 7650), nnz=245,812
Laplacian: (7650, 7650)
Degree matrix: (7650, 7650)

[3/6] Computing X-restricted eigenvectors...
Performing QR decomposition on X...
Original dimension: 745
Effective rank: 745/745
✓ Full rank - no dimension reduction needed
Computing projected matrices (Q^T L Q, Q^T D Q)...
Reduced Laplacian: (745, 745)
Reduced degree matrix: (745, 745)
Solving generalized eigenproblem in R^745...
Eigenvalue range: [0.051523, 1.214182]
Restricted eigenvectors U: (7650, 745)
D-orthonormality check: max |U^T D U - I| = 9.02e-09
✓ Excellent D-orthonormality

[4/6] Preparing data splits...

[5/6] Training 3 models (Directions A & B)...
Total runs: 15 = 3(models) × 5(seeds)
Batch size: 128 (dataset has 4590 training samples)

======================================================================
USING FIXED BENCHMARK SPLITS
======================================================================
Train: 4,590 | Val: 1,530 | Test: 1,530
Parameter-to-sample ratio: 56.3:1
⚠️  WARNING: High parameter-to-sample ratio! Expect overfitting.

--- Split 1/1, Seed 1/5 (seed=0) ---

Training: (a) Standard MLP on X (scaled)...
  ✓ Test acc: 0.8771 | Final val: 0.8902 | Ep20 val: 0.8732

Training: (b) Standard MLP on V (scaled)...
  🔍 This is experiment (b) - isolates pure basis effect!
  ✓ Test acc: 0.8575 | Final val: 0.8673 | Ep20 val: 0.8314

Training: (c) RowNorm MLP on V (unscaled)...
  ✓ Test acc: 0.8118 | Final val: 0.8229 | Ep20 val: 0.8248

--- Seed 1 Summary ---
  (a) Standard X: 0.8771
  (b) Standard V: 0.8575  [Diff from (a): -1.96%]
  (c) RowNorm V:  0.8118  [Diff from (b): -4.58%]
  → Basis effect (a vs b): 2.2% difference
  → RowNorm hurts: -5.3%

--- Split 1/1, Seed 2/5 (seed=1) ---

Training: (a) Standard MLP on X (scaled)...
  ✓ Test acc: 0.8882 | Final val: 0.8778 | Ep20 val: 0.8739

Training: (b) Standard MLP on V (scaled)...
  🔍 This is experiment (b) - isolates pure basis effect!
  ✓ Test acc: 0.7941 | Final val: 0.8033 | Ep20 val: 0.8046

Training: (c) RowNorm MLP on V (unscaled)...
  ✓ Test acc: 0.8157 | Final val: 0.8255 | Ep20 val: 0.8222

--- Seed 2 Summary ---
  (a) Standard X: 0.8882
  (b) Standard V: 0.7941  [Diff from (a): -9.41%]
  (c) RowNorm V:  0.8157  [Diff from (b): +2.16%]
  → Basis effect (a vs b): 10.6% difference
  → RowNorm helps: +2.7%

--- Split 1/1, Seed 3/5 (seed=2) ---

Training: (a) Standard MLP on X (scaled)...
  ✓ Test acc: 0.8379 | Final val: 0.8451 | Ep20 val: 0.8843

Training: (b) Standard MLP on V (scaled)...
  🔍 This is experiment (b) - isolates pure basis effect!
  ✓ Test acc: 0.8418 | Final val: 0.8536 | Ep20 val: 0.8124

Training: (c) RowNorm MLP on V (unscaled)...
  ✓ Test acc: 0.7980 | Final val: 0.8039 | Ep20 val: 0.8248

--- Seed 3 Summary ---
  (a) Standard X: 0.8379
  (b) Standard V: 0.8418  [Diff from (a): +0.39%]
  (c) RowNorm V:  0.7980  [Diff from (b): -4.38%]
  → Basis effect minimal: 0.5% difference
  → RowNorm hurts: -5.2%

--- Split 1/1, Seed 4/5 (seed=3) ---

Training: (a) Standard MLP on X (scaled)...
  ✓ Test acc: 0.8954 | Final val: 0.9007 | Ep20 val: 0.8830

Training: (b) Standard MLP on V (scaled)...
  🔍 This is experiment (b) - isolates pure basis effect!
  ✓ Test acc: 0.8627 | Final val: 0.8588 | Ep20 val: 0.8033

Training: (c) RowNorm MLP on V (unscaled)...
  ✓ Test acc: 0.8098 | Final val: 0.8183 | Ep20 val: 0.8327

--- Seed 4 Summary ---
  (a) Standard X: 0.8954
  (b) Standard V: 0.8627  [Diff from (a): -3.27%]
  (c) RowNorm V:  0.8098  [Diff from (b): -5.29%]
  → Basis effect (a vs b): 3.6% difference
  → RowNorm hurts: -6.1%

--- Split 1/1, Seed 5/5 (seed=4) ---

Training: (a) Standard MLP on X (scaled)...
  ✓ Test acc: 0.8765 | Final val: 0.8856 | Ep20 val: 0.9098

Training: (b) Standard MLP on V (scaled)...
  🔍 This is experiment (b) - isolates pure basis effect!
  ✓ Test acc: 0.8176 | Final val: 0.8248 | Ep20 val: 0.8471

Training: (c) RowNorm MLP on V (unscaled)...
  ✓ Test acc: 0.7784 | Final val: 0.7987 | Ep20 val: 0.8366

--- Seed 5 Summary ---
  (a) Standard X: 0.8765
  (b) Standard V: 0.8176  [Diff from (a): -5.88%]
  (c) RowNorm V:  0.7784  [Diff from (b): -3.92%]
  → Basis effect (a vs b): 6.7% difference
  → RowNorm hurts: -4.8%

[6/6] Aggregating results and generating outputs...
Aggregating: (a) Standard MLP on X (scaled)...
Aggregating: (b) Standard MLP on V (scaled)...
Aggregating: (c) RowNorm MLP on V (unscaled)...

✓ Saved aggregated metrics: results/investigation2_directions_AB/amazon-photo/fixed_splits/metrics/results_aggregated.json

======================================================================
FINAL SUMMARY
======================================================================
Dataset: amazon-photo
Split type: fixed_splits
Raw feature dimension: 745
Effective dimension (after QR): 745
span(U) = span(X) — same subspace, different basis
D-orthonormality: max |U^T D U - I| = 9.02e-09
Hidden dimension: 256
Epochs: 200
Total runs per model: 5

======================================================================
TEST ACCURACY RESULTS (Mean ± Std)
======================================================================
(a) Standard MLP on X (scaled):  87.50±1.99%
(b) Standard MLP on V (scaled):  83.48±2.57%
(c) RowNorm MLP on V (unscaled): 80.27±1.35%

======================================================================
DIRECTION B: BASIS SENSITIVITY (a vs b)
======================================================================
Same model (Standard MLP), same preprocessing (StandardScaler)
Only difference: coordinate system (X vs V)

Basis Effect: -0.0403 (-4.6%)
✓ SIGNIFICANT basis sensitivity detected
  → MLPs are sensitive to basis representation!

======================================================================
DIRECTION A: MODEL SENSITIVITY (b vs c)
======================================================================
Same basis (V), different models
Question: Does RowNorm help on restricted eigenvectors?

Model Effect: -0.0320 (-3.8%)
✗ RowNorm does NOT help on restricted eigenvectors

======================================================================
EFFECT INDEPENDENCE
======================================================================
Basis effect (a→b):        -4.60%
Model effect (b→c):        -3.84%
Expected combined:         -8.44%
Observed combined (a→c):   -8.26%
Interaction term:          +0.18%

✓ Effects are ADDITIVE (independent)

======================================================================
✓ Investigation 2 Directions A&B complete for amazon-photo!
✓ Results saved to: results/investigation2_directions_AB/amazon-photo/fixed_splits/
======================================================================
